@using eShop.UI.Extensions
@using eShop.UI.Storage.Services
@inject IMapper mapper
@* @inject IStorageService StorageService *@



@*﻿<main class="d-flex flex-wrap p-3 pt-2 align-items-start">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <span>Showing 1-8 of 40 products</span>
        </div>
    </div>
    <div class="row">
        <!-- Product card -->
        <div class="col-md-4 mb-3" style="min-width: 18rem;">
            <div class="card h-70">
                <img src="Images/car1.png" alt="Placeholder image for a car" class="card-img-top">
                <div class="card-body">
                    <h6 class="card-title">BMW X3</h6>
                    <p class="card-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi aliquet est a mollis venenatis.</p>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3" style="min-width: 18rem;">
            <div class="card h-70">
                <img src="Images/car2.png" alt="Placeholder image for a car" class="card-img-top">
                <div class="card-body">
                    <h6 class="card-title">Volvo XC60</h6>
                    <p class="card-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi aliquet est a mollis venenatis.</p>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3" style="min-width: 18rem;">
            <div class="card h-70">
                <img src="Images/car3.png" alt="Placeholder image for a car" class="card-img-top">
                <div class="card-body">
                    <h6 class="card-title">Volvo XC40</h6>
                    <p class="card-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi aliquet est a mollis venenatis.</p>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3" style="min-width: 18rem;">
            <div class="card h-70">
                <img src="Images/car4.webp" alt="Placeholder image for a car" class="card-img-top">
                <div class="card-body">
                    <h6 class="card-title">Tesla Model S</h6>
                    <p class="card-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi aliquet est a mollis venenatis.</p>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3" style="min-width: 18rem;">
            <div class="card h-70">
                <img src="Images/car5.webp" alt="Placeholder image for a car" class="card-img-top">
                <div class="card-body">
                    <h6 class="card-title">Tesla Model X</h6>
                    <p class="card-text">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi aliquet est a mollis venenatis.</p>
                </div>
            </div>
        </div>
        <!-- Repeat for each product card -->
    </div>
</main>*@

﻿<main>
<div class="d-flex mb-3">
            <span>Showing @Service?.Products.Count cars</span>
</div>
    <div class="row d-flex flex-wrap">
    <!-- Product card -->
    @foreach (var product in Service!.Products)
        {
            
                <div class="card col-md-3 m-3" style="width: 20rem;">
                <img src="@product.PictureUrl" alt="Placeholder image for a car" class="pt-3 card-img-top">
                    <div class="card-body">
                    <h5 class="card-title">@product?.Brand.BrandName @product!.Name</h5>
                        <h6>@product!.Year</h6>
                        <p class="card-text">@product.Description</p>
                    </div>
                    <div class="d-flex card-footer bg-white g-0 justify-content-start">
                        <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                            @foreach (var fuel in product.Fuels!)
                            {
                                <input type="radio" class="btn-check" name="btnradio-@product.Id" id="fuel-@product.Id-@fuel.Id" 
                                       autocomplete="off" @onclick="() => OnSizeClick(product, fuel)" checked>
                                <label class="btn btn-outline-dark btn-radio" for="size-@product.Id-@fuel.Id">@fuel.FuelName</label>
                            }
                        </div>

                        <div class="btn-group mx-2" role="group" aria-label="Basic radio toggle button group">
                            @foreach (var color in product.Colors!)
                            {
                            <input type="radio" class="btn-check" name="color-@product.Id-@color.Id" id="color-@product.Id-@color.Id"
                                   autocomplete="off" @onclick="() => OnColorClick(product, color)">
                                <label class="btn btn-sm btn-outline-dark pt-2"
                                       style="background-color: @color.BkColorHex ; color: @(color.IsSelected ? @color.ColorHex : @color.BkColorHex)"
                                   for="color-@product.Id-@color.Id"><i class="bi-check"></i></label>
                            }
                            
                        </div>

                        <button class="btn btn-sm btn-success" @onclick="() => AddToCart(product)"><i class="bi-cart"></i></button>
                    </div>
                </div>
        }
    
    </div>
 </main>
 
@code{
     [CascadingParameter(Name = "Service")] public UIService? Service { get; set; }
     [Parameter] public EventCallback OnChange { get; set; }

     // Set the category to 1 when loading page for first time
     protected override async Task OnInitializedAsync()
     {
         if (Service is not null)
         {
             Service.CurrentCategoryId = 1;
             await Service.GetProductsAsync();
         }
     }

     void OnSizeClick(ProductGetDTO product, FuelGetDTO fuel)
     {
         product.Fuels!.ForEach(f => f.IsSelected = false);
         fuel.IsSelected = true;
     }

     void OnColorClick(ProductGetDTO product, ColorGetDTO color)
     {
         product.Colors!.ForEach(c => c.IsSelected = false);
         color.IsSelected = true;
     }

     async Task AddToCart(ProductGetDTO product)
     {
        var cartItem = mapper.Map<CartItemDTO>(product);
        cartItem.Color = product.Colors!.FirstOrDefault(c => c.IsSelected);
        Service!.CartItems.Add(cartItem);
        await Service!.SaveToStorage("CartItems", Service!.CartItems);

        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync();

         // await StorageService.SetAsync("MyKey", product);

         // var prod = await StorageService.GetAsync<ProductGetDTO>("MyKey");
         // var prod = await Service!.ReadSingleStorage<ProductGetDTO>("MyKey");

         // await StorageService.RemoveAsync("MyKey");
         //Service!.CartItems.Remove(cartItem);
         //await Service!.RemoveFromStorage("CartItems");
     }

}
