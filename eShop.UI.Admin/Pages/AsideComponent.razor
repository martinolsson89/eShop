@using eShop.UI.Admin.Service
<AddItem ProductAdded="OnProductAdded" @ref="addItemComponent"/>
<CategoryItem CategoryAdded="OnCategoryAdded" @ref="categoryItemComponent"/>
<ViewCategoriesItem/>
<aside id="aside-menu" class="d-flex flex-column m-2 ms-0 mt-0 p-2 pt-0 vh-100" style="min-width: 160px; max-width: 200px;">
    <div class="ps-3">
        <h6 class="font-weight-semibold">Admin Options</h6>
        <div class="button-container">
            <button class="category mb-1" data-bs-toggle="modal" data-bs-target="#add" style="background: none; border: none; padding: 0; cursor: pointer;" @onclick="() => ShowAddModal()">
                Add Car
            </button>
            
        </div>
        <div class="button-container">
            <button class="category mb-1" data-bs-toggle="modal" data-bs-target="#category" style="background: none; border: none; padding: 0; cursor: pointer;" @onclick="() => ShowAddCategoryModal()">
                Add Category
            </button>
            <div class="button-container">
                <button class="category mb-1" data-bs-toggle="modal" data-bs-target="#viewcategories" style="background: none; border: none; padding: 0; cursor: pointer;">
                View Categories
                </button>
            </div>
            
        </div>
    </div>
    <span class="border-bottom"></span>
</aside>

@code {
    [CascadingParameter(Name = "Service")] public UIAdminService? Service { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }


    private AddItem? addItemComponent;

    private async Task ShowAddModal()
    {

        await addItemComponent!.ShowAddConfirmation();

    }

    async Task OnProductAdded(ProductGetDTO product)
    {
        var index = Service!.Products.FindIndex(p => p.Id == product.Id);
        if (index != -1)
        {
            // Update the entire product or just the necessary properties
            Service.Products[index] = product;
        }

        StateHasChanged(); // Re-render the component to reflect the changes
        //if product is added, refresh the page
        if (Service is not null)
        {
            await Service.GetProductsAsync();
            await OnChange.InvokeAsync();
        }

    }

    private CategoryItem? categoryItemComponent;

    private void ShowAddCategoryModal()
    {

        categoryItemComponent!.ShowAddConfirmation();

    }

    private void OnCategoryAdded(CategoryGetDTO category)
    {
        var index = Service!.Categories.FindIndex(p => p.Id == category.Id);
        if (index != -1)
        {
            // Update the entire product or just the necessary properties
            Service.Categories[index] = category;
        }

        StateHasChanged(); // Re-render the component to reflect the changes
        //if product is added, refresh the page

    }
}